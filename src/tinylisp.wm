a tiny "lisp" I made for fun
==========================

supports variables (with the set function), numbers, addition, and lambdas
probably will anger lisp purists if I call it a lisp because no quotes, eval/apply, or any of that truly lispy stuff


```
P=s=>eval(`[${s.replace(/[^()\s]+|\S/g,s=>s=="("?"[":s==")"?"],":`"${s}",`)}]`)[0];
L=(s,e)=>e.s[s]||e.p&&L(s,e.p);
E=(s,e)=>s.map
 ?s[0]==="set"?e.s[s[1]]=E(s[2],e)
  :s[0]==="lambda"?(...a)=>{f={p:e,s:{}};s[1].map((x,i)=>f.s[x]=a[i]);return E(s[2],f)}
  :E(s[0],e)(...s.slice(1).map(x=>E(x,e)))
 :s==="+"?(...a)=>a.reduce((x,y)=>x+y):!isNaN(s)?+s:L(s,e);
//rls=require("readline-sync");e={s:{}};while(s=rls.question("> "))console.log(E(P(s),e));//for running with nodejs
```



`t<I>

shift+enter to eval

`d<O>
`sc<
I=document.getElementById("I"),O=document.getElementById("O");I.style.width="calc(100% - 6px)";I.style.height="93px";sh=0,ent=0;
fmt=s=>(typeof s=="function"?"<lambda>":s)+"\n";
e={s:{}};exec=()=>{s=I.value;I.value="";try{o=E(P(s),e);}catch(e){o="err";}O.prepend(document.createTextNode(fmt(o)));}
I.addEventListener("keydown", e=>{e.key=="Enter"?ent=1:e.key="Shift"?sh=1:0;if(sh&&ent)e.preventDefault(),exec();});
I.addEventListener("keyup",   e=> e.key=="Enter"?ent=0:e.key="Shift"?sh=0:0);
P=s=>eval(`[${s.replace(/[^()\s]+|\S/g,s=>s=="("?"[":s==")"?"],":`"${s}",`)}]`)[0];
L=(s,e)=>e.s[s]||e.p&&L(s,e.p);
E=(s,e)=>s.map
 ?s[0]==="set"?e.s[s[1]]=E(s[2],e)
  :s[0]==="lambda"?(...a)=>{f={p:e,s:{}};s[1].map((x,i)=>f.s[x]=a[i]);return E(s[2],f)}
  :E(s[0],e)(...s.slice(1).map(x=>E(x,e)))
 :s==="+"?(...a)=>a.reduce((x,y)=>x+y):!isNaN(s)?+s:L(s,e);
>`sc

